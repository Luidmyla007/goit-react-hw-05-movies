{"version":3,"file":"static/js/519.1bb5625d.chunk.js","mappings":"6OACMA,EAAQ,mCAGCC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA2BC,GAA3B,0FAC2BC,EAAAA,EAAAA,GAAM,qBAAsB,CACnDC,OAAQ,CACNC,QAASL,EACTE,KAAAA,KAJN,cACWI,EADX,OAOWC,EAAYD,EAAOE,KAAKC,QAAQC,KACvC,YACE,MAAO,CAAEC,GADmC,EAA3CA,GACYC,MAD+B,EAAvCA,MACeC,YADwB,EAAhCA,YACqBC,aADW,EAAnBA,aAE1B,IAVL,kBAYWP,GAZX,kEAFAJ,EAAAA,EAAAA,SAAAA,QAAyB,gCAiBzB,I,cAAA,EAjBA,SAE2B,GAAZF,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,E,mDCFFc,EAAOC,EAAAA,GAAAA,GAAH,oLAaJC,EAAQD,EAAAA,GAAAA,EAAH,wKAWLE,EAASF,EAAAA,GAAAA,IAAH,yEAONG,EAAcH,EAAAA,GAAAA,IAAH,uGAQXI,EAAcJ,EAAAA,GAAAA,EAAH,yCAIXK,EAAYL,EAAAA,GAAAA,EAAH,yCAITM,EAAQN,EAAAA,GAAAA,KAAH,6C,SCrClB,SAASO,EAAT,GAAmE,IAA9CZ,EAA6C,EAA7CA,GAAIC,EAAyC,EAAzCA,MAAOY,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,UAC7CC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACb,EAAD,WACE,UAAC,KAAD,CAAMc,GAAE,kBAAalB,GAAMmB,MAAO,CAAEC,KAAMJ,GAA1C,WACE,SAACV,EAAD,UAAQL,KACR,SAACM,EAAD,CAAQc,IAAKR,EAAQS,IAAKrB,KAC1B,UAACO,EAAD,YACE,UAACC,EAAD,6BACgB,SAACE,EAAD,UAAQG,QAExB,UAACJ,EAAD,0BACa,UAACC,EAAD,eAASI,eAM/B,CAEDH,EAAUW,UAAY,CACpBvB,GAAIwB,IAAAA,OACJvB,MAAOuB,IAAAA,OACPX,OAAQW,IAAAA,OACRV,YAAaU,IAAAA,OACbT,UAAWS,IAAAA,QAGb,I,EAAA,ICvCaC,EAAcpB,EAAAA,GAAAA,GAAH,kKCExB,SAASqB,EAAT,GAAgC,IAAXC,EAAU,EAAVA,OACnB,OACE,SAACF,EAAD,UACGE,EAAO5B,KAAI,YAAoD,IAAjDC,EAAgD,EAAhDA,GAAIC,EAA4C,EAA5CA,MAAOY,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UAC7C,OACE,SAAC,EAAD,CAEEf,GAAIA,EACJC,MAAOA,EACPY,OAAQA,EACRC,YAAaA,EACbC,UAAWA,GALNf,EAQV,KAGN,CAED0B,EAAUH,UAAY,CACpBI,OAAQH,IAAAA,QACNA,IAAAA,MAAgB,CACdxB,GAAIwB,IAAAA,OACJvB,MAAOuB,IAAAA,OACPX,OAAQW,IAAAA,OACRV,YAAaU,IAAAA,OACbT,UAAWS,IAAAA,UAEbI,YAGJ,QCbA,MAlBA,WACE,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOF,EAAP,KAAeG,EAAf,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACRzC,IACG0C,KAAKF,GACHG,OAAM,SAAUC,GACfC,QAAQC,IAAI,SAAWF,EACxB,GACN,GAAE,IAGDP,IACI,SAAC,EAAD,CAAYA,OAAQA,GAG3B,C","sources":["Fetch/getTrending.jsx","components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.jsx","components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","Pages/Home/Home.jsx"],"sourcesContent":["import axios from 'axios';\nconst TOKEN = '51114562faac57108ae3113fba230ec4';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nasync function getTrending(page) {\n    const  result =  await axios('trending/movie/day', {\n    params: {\n      api_key: TOKEN,\n      page,\n    },\n    }); \n     const trendsMov = result.data.results.map(\n    ({ id, title, poster_path, vote_average }) => {\n      return { id, title, poster_path, vote_average };\n    }\n  );\n    return trendsMov;\n};\n\nexport default getTrending;","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  width: calc((100%-80px) / 6);\n  transform: scale(1);\n  &:hover {\n    transform: scale(1.1);\n  }\n\n  img {\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nexport const Title = styled.p`\n  font-size: 20px;\n  font-weight: 700;\n  text-align: center;\n  color: rgba(9, 60, 61, 1);\n  width: 300px;\n  margin-bottom: 15px;\n  \n  }\n`;\n\nexport const Poster = styled.img`\n  width: 300px;\n  margin-bottom: 15px;\n \n  }\n`;\n\nexport const VoteWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 300px;\n  \n  }\n`;\n\nexport const VoteAverage = styled.p`\n  color: black;\n`;\n\nexport const VoteCount = styled.p`\n  color: black;\n`;\n\nexport const Value = styled.span`\n  font-weight: 700;\n`;","import { Link, useLocation } from 'react-router-dom';\nimport propTypes from 'prop-types';\nimport {\n  Item,\n  Title,\n  Poster,\n  VoteWrapper,\n  VoteAverage,\n  VoteCount,\n  Value,\n} from './MovieCard.styled';\n\nfunction MovieCard({ id, title, poster, voteAverage, voteCount }) {\n  const location = useLocation();\n\n  return (\n    <Item>\n      <Link to={`/movies/${id}`} state={{ from: location }}>\n        <Title>{title}</Title>\n        <Poster src={poster} alt={title}/>\n        <VoteWrapper>\n          <VoteAverage>\n            Vote average: <Value>{voteAverage}</Value>\n          </VoteAverage>\n          <VoteCount>\n            Vote count:<Value> {voteCount}</Value>\n          </VoteCount>\n        </VoteWrapper>\n      </Link>\n    </Item>\n  );\n}\n\nMovieCard.prototype = {\n  id: propTypes.number,\n  title: propTypes.string,\n  poster: propTypes.string,\n  voteAverage: propTypes.number,\n  voteCount: propTypes.number,\n};\n\nexport default MovieCard;","import styled from 'styled-components';\n\nexport const ListWrapper = styled.ul` {\npadding: 15px 70px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  justify-content: space-around;\n  list-style-type: none;\n}\n`;","import propTypes from 'prop-types';\nimport MovieCard from 'components/MovieCard/MovieCard';\nimport { ListWrapper } from './MovieList.styled';\n\nfunction MovieList({ movies }) {\n  return (\n    <ListWrapper>\n      {movies.map(({ id, title, poster, voteAverage, voteCount }) => {\n        return (\n          <MovieCard\n            key={id}\n            id={id}\n            title={title}\n            poster={poster}\n            voteAverage={voteAverage}\n            voteCount={voteCount}\n          />\n        );\n      })}\n    </ListWrapper>\n  );\n}\n\nMovieList.prototype = {\n  movies: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.number,\n      title: propTypes.string,\n      poster: propTypes.string,\n      voteAverage: propTypes.number,\n      voteCount: propTypes.number,\n    }),\n  ).isRequired,\n};\n\nexport default MovieList;","import { useState, useEffect } from 'react';\nimport getTrending from 'Fetch/getTrending.jsx';\nimport  MoviesList  from 'components/MovieList/MovieList';\n\nfunction Home() {\n  const [movies, setMovies] = useState(null);\n\n  useEffect(() => {\n    getTrending()\n      .then(setMovies)\n        .catch(function (error){\n          console.log('Error:' + error);\n        });    \n  }, []);\n\n  return (\n    movies && (     \n        <MoviesList movies={movies} />     \n    )\n  );\n}\n\nexport default Home;"],"names":["TOKEN","getTrending","page","axios","params","api_key","result","trendsMov","data","results","map","id","title","poster_path","vote_average","Item","styled","Title","Poster","VoteWrapper","VoteAverage","VoteCount","Value","MovieCard","poster","voteAverage","voteCount","location","useLocation","to","state","from","src","alt","prototype","propTypes","ListWrapper","MovieList","movies","isRequired","useState","setMovies","useEffect","then","catch","error","console","log"],"sourceRoot":""}